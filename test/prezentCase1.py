from seleniumbase import BaseCase


class Login(BaseCase):

    # launch the URL and log-in with credentials
    def setUp(driver):
        super().setUp()
        driver.maximize_window()
        driver.open("https://prezent-uatstaging.myprezent.com/signin")
        driver.assert_element("#username")
        driver.type("#username", "engg_user.noreply@prezent.ai")
        driver.click("#continue")
        driver.type("#password", "kiqjemkh")
        driver.click("#submit")
        driver.wait_for_element_visible("div[name='profile-icon'] .v-avatar.profile-user-avatar.rounded", timeout=20)

    # click on the profile button and hit logout button
    def tearDown(driver):
        driver.wait_for_element_visible("div[name='profile-icon'] .v-avatar.profile-user-avatar.rounded", timeout=20)
        driver.click("div[name='profile-icon'] .v-avatar.profile-user-avatar.rounded")
        driver.wait_for_element_visible("a[href='#basics']")
        driver.click("a[href='#basics']")
        driver.wait_for_element_visible("button[class*='log-out-button']")
        driver.click("button[class*='log-out-button']")
        super().tearDown()

    # On the templates, Printing the current template name
    def test_Case1(driver):
        driver.click("div[name='profile-icon'] .v-avatar.profile-user-avatar.rounded")
        driver.wait_for_element_visible("a[href='#templates']")
        driver.click("a[href='#templates']")
        driver.wait_for_element_not_visible(".spinning-loading-wrapper.undefined .v-clip")
        driver.wait_for_element_visible("button[data-pendo-id='selected-template']")
        print("\nYour current template name is " + driver.get_text(
            "div:has(> button[data-pendo-id='selected-template']) .cardTitleForViewer"))

    # On the fingerprint, Re-taking fingerprint test
    def test_Case2(driver):
        driver.click("div[name='profile-icon'] .v-avatar.profile-user-avatar.rounded")
        driver.wait_for_element_visible("a[href='#fingerprint']")
        driver.click("a[href='#fingerprint']")
        driver.scroll_to("div.btn-retake")
        driver.click("div.btn-retake")
        driver.wait_for_element_visible("span.v-btn__content", timeout=45)
        driver.click("span.v-btn__content")
        # Random choice of click on My fingerprint cards in the loop
        for x in range(6):
            driver.wait_for_element_visible("div[aria-valuemax='100']")
            driver.wait_for_element_visible("div.question-content-header div.header")
            driver.click("div.images-wrapper div.card-item")
            driver.wait_for_element_not_visible("div[class*='main-wrapper fadeScreen']")
        driver.wait_for_element_visible("div.selections-wrapper")
        driver.click("//span[text()=' Label all charts ']")
        driver.click("#show-fingerprint-for-btn--auto")
        # skip button click on Basic details in the loop
        for x in range(5):
            driver.wait_for_element_visible("div.question-content-header div.header")
            driver.click("div.skip-button")
            driver.wait_for_element_not_visible("div[class*='main-wrapper fadeScreen']")
        driver.wait_for_element_visible("div.encourage-share-fingerprint div.encourage-title")
        driver.click("div.skip-button")
        driver.wait_for_element_not_visible("div.v-spinner")
        driver.wait_for_element_visible("div.share-footer.align-middle button")
        # Click on View my fingerprint
        driver.click("div.share-footer.align-middle button")
        driver.wait_for_element_visible("div.progress-loader")
        # Generating fingerprint loader
        driver.wait_for_element_not_visible("div.progress-loader")
        driver.wait_for_element_visible("button[class*='v-btn v-btn--is-elevated v-btn--has-bg v']")
        driver.scroll_to("button[class*='v-btn v-btn--is-elevated v-btn--has-bg v']")
        # Click on the Back to Prezent button
        driver.click("button[class*='v-btn v-btn--is-elevated v-btn--has-bg v']")

    # On the Auto generator, Downloading the presentation generated by ASTRID™ AI
    def test_Case3(driver):
        driver.wait_for_element_visible("div#v-step-3[name--auto='generate']")
        driver.click("div#v-step-3[name--auto='generate']")
        driver.wait_for_element_visible("textarea[data-pendo-id='generate-propmt']")
        driver.click("textarea[data-pendo-id='generate-propmt']")
        driver.wait_for_element_visible("p#generate-suggested-2")
        # Selecting the third Suggestion
        driver.click("p#generate-suggested-2")
        driver.click("button[data-pendo-id='generate-btn']")
        driver.wait_for_element_visible("div[class='slides-list']")
        driver.wait_for_element_visible("video[autoplay='autoplay']")
        # ASTRID™ AI Generating the presentation based on the provided suggestion
        driver.wait_for_element_not_visible("div[class='v-spinner loading-spinner']", timeout=200)
        driver.wait_for_element_not_visible("video[autoplay='autoplay']", timeout=80)
        driver.wait_for_element_visible("div[data-pendo-id='generate-template']")
        driver.hover("#download")
        driver.wait_for_element_visible("button#download[aria-expanded='true']")
        # Clicking on the download button
        driver.click("button#download[aria-expanded='true']")
        driver.wait_for_element_visible(".download-actions.button")
        driver.click(".download-actions.button")
        driver.wait_for_element_visible("button#download-btn-from-list")
        # Download the PPT button
        driver.click("button#download-btn-from-list")
        driver.wait_for_element_visible("div[class='slide-collection-download-header']")
        # ppt file is generated for download and successfully downloaded
        driver.wait_for_element_visible("//span[text()=' Download Completed ']", timeout=25)
        driver.wait_for_element_not_visible(".download-actions.button")
        driver.click("div[class='actions'] button[class*='mdi-close']")
        driver.click(".pro-tip-content span.link")
        driver.click("button[aria-label='clear icon']")
        driver.wait_for_element_not_visible("button[aria-label='clear icon']")
